import json
import os
from datetime import datetime, timedelta
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, Location
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
from apscheduler.schedulers.background import BackgroundScheduler
import asyncio

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
TOKEN = "7764142089:AAHWDwtR2SJiCevefbuUeYcDhcl9P44EWt8"
SESSIONS_DIR = "sessions"
PHONE_NUMBER = "+998 90 123 45 67"  # –∑–∞–º–µ–Ω–∏—à—å –Ω–∞ —Å–≤–æ–π –Ω–æ–º–µ—Ä
LOCATION = (41.318036, 69.338983)  # –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–∞–ª–æ–Ω–∞

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
if not os.path.exists(SESSIONS_DIR):
    os.makedirs(SESSIONS_DIR)

scheduler = BackgroundScheduler()
scheduler.start()

# === –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É ===
async def notify_user(chat_id: int, message: str):
    app = ApplicationBuilder().token(TOKEN).build()
    try:
        await app.bot.send_message(chat_id=chat_id, text=message)
        await app.bot.send_location(chat_id=chat_id, latitude=LOCATION[0], longitude=LOCATION[1])
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É {chat_id}: {e}")

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è"), KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–µ–∞–Ω—Å")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addsession –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–∞–Ω—Å.",
        reply_markup=reply_markup
    )

# === –ö–æ–º–∞–Ω–¥–∞ /addsession ===
async def addsession(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        args = context.args
        if len(args) < 4:
            await update.message.reply_text(
                "‚ùó –§–æ—Ä–º–∞—Ç: /addsession YYYY-MM-DD HH:MM chat_id –°–æ–æ–±—â–µ–Ω–∏–µ"
            )
            return

        date_str, time_str, chat_id_str = args[0], args[1], args[2]
        message = " ".join(args[3:])
        chat_id = int(chat_id_str)

        dt = datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M")
        notify_time = dt - timedelta(hours=1)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ–∞–Ω—Å–∞
        session_data = {
            "chat_id": chat_id,
            "datetime": dt.strftime("%Y-%m-%d %H:%M"),
            "message": message,
        }

        session_filename = os.path.join(
            SESSIONS_DIR,
            f"session_{dt.strftime('%Y%m%d_%H%M%S')}_{chat_id}.json"
        )
        with open(session_filename, "w") as f:
            json.dump(session_data, f)

        # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        scheduler.add_job(
            lambda: asyncio.run(notify_user(chat_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {message}")),
            trigger="date",
            run_date=notify_time
        )

        await update.message.reply_text(
            f"‚úÖ –°–µ–∞–Ω—Å –∑–∞–ø–∏—Å–∞–Ω. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏–¥—ë—Ç –∑–∞ 1 —á–∞—Å ({notify_time.strftime('%H:%M')})"
        )

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# === –ö–Ω–æ–ø–∫–∞ "–°–≤—è–∑–∞—Ç—å—Å—è" ===
async def contact_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"üìû –ù–∞—à –Ω–æ–º–µ—Ä: {PHONE_NUMBER}")

# === –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∏—Ç—å —Å–µ–∞–Ω—Å" ===
async def cancel_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    removed = 0

    for filename in os.listdir(SESSIONS_DIR):
        path = os.path.join(SESSIONS_DIR, filename)
        with open(path, "r") as f:
            data = json.load(f)
            if data.get("chat_id") == chat_id:
                os.remove(path)
                removed += 1

    if removed > 0:
        await update.message.reply_text("‚ùå –í–∞—à —Å–µ–∞–Ω—Å(—ã) –æ—Ç–º–µ–Ω—ë–Ω.")
    else:
        await update.message.reply_text("‚ùó –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–∞–Ω—Å–æ–≤.")

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("addsession", addsession))
    app.add_handler(MessageHandler(filters.Regex("üìû –°–≤—è–∑–∞—Ç—å—Å—è"), contact_handler))
    app.add_handler(MessageHandler(filters.Regex("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–µ–∞–Ω—Å"), cancel_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ")
    app.run_polling()
